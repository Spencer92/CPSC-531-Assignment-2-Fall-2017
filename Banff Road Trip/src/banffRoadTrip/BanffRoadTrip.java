package banffRoadTrip;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;

public class BanffRoadTrip {
	
	
	
	/**
	 * This program runs all the files generated by the other program
	 * (creatively named "Banff Road Trip send")
	 * 
	 * @param args
	 * @throws NumberFormatException
	 * @throws IOException
	 */
	
	

	public BanffRoadTrip(String[] args) throws NumberFormatException, IOException
	{
		String [] serviceNames = new String[4];
		String [] arrivalNames = new String[4];
		LinkedList<double[]> serviceMethods = new LinkedList<double[]>();
		LinkedList<double[]> arrivalRates = new LinkedList<double[]>();	
		serviceNames[0] = "Deterministic";
		serviceNames[1] = "Exponential";
		serviceNames[2] = "HyperEx";
		serviceNames[3] = "CorrEx";
		arrivalNames[0] = "0.5 Lambda";
		arrivalNames[1] = "0.55 Lambda";
		arrivalNames[2] = "0.6 Lambda";
		arrivalNames[3] = "0.65 Lambda";
	
		
		
		/**
		 * This loads the files into the program
		 * 
		 */
		
		for(int i = 0; i < serviceNames.length; i++)
		{
			serviceMethods.add(getFile(serviceNames[i]));
		}
		
		for(int i = 0; i < arrivalNames.length; i++)
		{
			arrivalRates.add(getFile(arrivalNames[i]));
		}
		
		
		/**
		 * This runs each simulated arrival rate to the simulated
		 * service rate
		 * 
		 * 
		 */
		
		for(int i = 0; i < arrivalRates.size(); i++)
		{
			for(int j = 0; j < serviceMethods.size(); j++)
			{
				runSimulation(arrivalRates.get(i),serviceMethods.get(j),arrivalNames[i],serviceNames[j]);
			}
		}
		
		
	}
	
	/**
	 * This is to run the simulation for each service type
	 * 
	 * It's largely taken from ssq1.c, and converted
	 * in order to work with Java the main differences being that
	 * the arrival times and service times are taken from separate
	 * sources
	 * 
	 * 
	 * @param arrivalTimes The time that the cars arrive
	 * @param serviceTimes How long it takes to service the car
	 * @param arrivalType What the variation in arrival rate is
	 * @param serviceType What the service type is
	 */
	
	public void runSimulation(double[] arrivalTimes, double[] serviceTimes, String arrivalType, String serviceType)
	{
		double arrivalTime = 0;
		double departureTime = 0;
		double delayAmount;
		double serviceTime;
		double waitLength;
		double totalDelay = 0;
		double [] adjustedTimes = new double[arrivalTimes.length];
		double standardDeviation;
		double adjustedTotal = 0;
		double mean;
		
		System.out.println("Statistics for " + serviceType + " at " + arrivalType + ":");
		
		
		
		//Gets the mean
		for(int i = 0; i < arrivalTimes.length && i < serviceTimes.length; i++)
		{
			arrivalTime = arrivalTimes[i];
			serviceTime = serviceTimes[i];
			
			//if the car arrived before service was done, then there was delay
			if(arrivalTime < departureTime)
			{
				delayAmount = departureTime - arrivalTime;
			}
			else
			{
				delayAmount = 0.0;
			}
			
			waitLength = delayAmount + serviceTime;
			departureTime = arrivalTime + waitLength;
			totalDelay += delayAmount;
			
		}
		
		mean = totalDelay/serviceTimes.length;
		
		
		//Gets the standard deviation
		for(int i = 0; i < adjustedTimes.length && i < serviceTimes.length; i++)
		{
			adjustedTimes[i] = serviceTimes[i]-mean;
			adjustedTimes[i] *= adjustedTimes[i];
			adjustedTotal += adjustedTimes[i];
		}
		
		standardDeviation = adjustedTotal/adjustedTimes.length;
		standardDeviation = Math.sqrt(standardDeviation);
		
		
		System.out.println("mean: " + mean);
		System.out.println("Standard deviation: " + standardDeviation  + "\n");
		
	}
	
	/**
	 * Reads all the files for storage
	 * @param file the name of the file
	 * @return the read file in an array
	 * @throws NumberFormatException
	 * @throws IOException
	 */
	
	public double[] getFile(String file) throws NumberFormatException, IOException
	{
		BufferedReader reader = new BufferedReader(new FileReader("..\\" + file + ".txt"));
		LinkedList<Double> storage = new LinkedList<Double>();
		String input;
		double convertedList[];
		
		while((input = reader.readLine())!=null)
		{
			storage.add(Double.parseDouble(input));
		}
		
		convertedList = new double[storage.size()];
		
		
		//in order to not have to work with a linked list all the time.
		for(int i = 0; i < convertedList.length; i++)
		{
			convertedList[i] = storage.get(i);
		}
		
		reader.close();
		
		return convertedList;
		
	}
	
	public static void main(String[] args) throws NumberFormatException, IOException 
	{
		
		new BanffRoadTrip(args);
		
	}
}
